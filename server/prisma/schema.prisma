// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  fullName      String
  username      String    @unique
  email         String    @unique
  password_hash String
  createdAt     DateTime  @default(now())
  Plants        Plants[]
  Posts         Post[]
  Comments      Comment[]
}

model Plants {
  id         Int      @id @default(autoincrement())
  name       String
  note       String?
  image_url  String
  water_freq Int?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id    Int
  createdAt  DateTime @default(now())
  waterLogs  WaterLogs[]
}

model WaterLogs {
  id Int             @id @default(autoincrement())
  plant Plants       @relation(fields: [plant_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  plant_id Int
  wateredAt DateTime @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  tag       PostTag
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id   Int
  Comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  post_id   Int
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id   Int
}

enum PostTag {
  question
  tip
}
